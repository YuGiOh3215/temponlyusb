<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="K+p7qhtRucG+^C;m~^1/">LoggingIsOn</variable></variables><block type="pxt-on-start" id="=?@(+hW-{LPkVB]Q)KYo" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="~p,7NyO@e8taFmP;jy6e" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let tempC = 0" numlines="1" declaredvars="tempC"></mutation><next><block type="typescript_statement" id="EAIt^!_}VW/j[#eaGbKX" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class TimeAndDate {" line1="    private static _referenceCount: number" line2="    private ____referenceCount_is_set: boolean" line3="    private ____referenceCount: number" line4="    get _referenceCount(): number {" line5="        return this.____referenceCount_is_set ? this.____referenceCount : TimeAndDate._referenceCount" line6="    }" line7="    set _referenceCount(value: number) {" line8="        this.____referenceCount_is_set = true" line9="        this.____referenceCount = value" line10="    }" line11="    " line12="    private static _refHours: number" line13="    private ____refHours_is_set: boolean" line14="    private ____refHours: number" line15="    get _refHours(): number {" line16="        return this.____refHours_is_set ? this.____refHours : TimeAndDate._refHours" line17="    }" line18="    set _refHours(value: number) {" line19="        this.____refHours_is_set = true" line20="        this.____refHours = value" line21="    }" line22="    " line23="    private static _refMinutes: number" line24="    private ____refMinutes_is_set: boolean" line25="    private ____refMinutes: number" line26="    get _refMinutes(): number {" line27="        return this.____refMinutes_is_set ? this.____refMinutes : TimeAndDate._refMinutes" line28="    }" line29="    set _refMinutes(value: number) {" line30="        this.____refMinutes_is_set = true" line31="        this.____refMinutes = value" line32="    }" line33="    " line34="    static Seconds: number" line35="    private ___Seconds_is_set: boolean" line36="    private ___Seconds: number" line37="    get Seconds(): number {" line38="        return this.___Seconds_is_set ? this.___Seconds : TimeAndDate.Seconds" line39="    }" line40="    set Seconds(value: number) {" line41="        this.___Seconds_is_set = true" line42="        this.___Seconds = value" line43="    }" line44="    " line45="    private static _refSeconds: number" line46="    private ____refSeconds_is_set: boolean" line47="    private ____refSeconds: number" line48="    get _refSeconds(): number {" line49="        return this.____refSeconds_is_set ? this.____refSeconds : TimeAndDate._refSeconds" line50="    }" line51="    set _refSeconds(value: number) {" line52="        this.____refSeconds_is_set = true" line53="        this.____refSeconds = value" line54="    }" line55="    " line56="    Count: number" line57="    public static __initTimeAndDate() {" line58="        //     Year = 2023" line59="        //     Month = 5" line60="        //     Day = 20" line61="        TimeAndDate._refHours = 0" line62="        TimeAndDate._refMinutes = 0" line63="        TimeAndDate._refSeconds = 0" line64="        //     Hours = 21" line65="        //     Minutes = 20" line66="        TimeAndDate.Seconds = 0" line67="        TimeAndDate._referenceCount = 0" line68="    }" line69="    " line70="    constructor() {" line71="        this.Count = 0" line72="        this._referenceCount = 0" line73="    }" line74="    " line75="    public start() {" line76="        this._referenceCount = input.runningTime()" line77="        this.Count = 0" line78="    }" line79="    " line80="    public getTime() {" line81="        this.Count = (input.runningTime() - this._referenceCount) / 1000" line82="        let compare = this.Count - (this._refHours * 3600 + this._refMinutes * 60)" line83="        if (compare &gt;= 60) {" line84="            this.Seconds = Math.roundWithPrecision(compare - 60, 0)" line85="            this._refMinutes = this._refMinutes + 1" line86="        } else {" line87="            this.Seconds = Math.roundWithPrecision(compare, 0)" line88="        }" line89="        " line90="        if (this._refMinutes &gt;= 60) {" line91="            this._refMinutes = this._refMinutes - 60" line92="            this._refHours = this._refHours + 1" line93="        }" line94="        " line95="        if (this._refHours &gt;= 24) {" line96="            this._refHours = this._refHours - 24" line97="        }" line98="        " line99="        let szLine = this.Count + &quot;\t&quot; + this._refHours + &quot;:&quot; + this._refMinutes + &quot;:&quot; + this.Seconds" line100="        return szLine" line101="    }" line102="    " line103="}" numlines="104"></mutation><next><block type="typescript_statement" id="}9T[aqFb?qtx5/~K~M)W" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="TimeAndDate.__initTimeAndDate()" numlines="1"></mutation><next><block type="typescript_statement" id="yI[0S$T#VvCPm#s[tev+" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class LoggingParams {" line1="    private static _iLogInterval: number" line2="    private ____iLogInterval_is_set: boolean" line3="    private ____iLogInterval: number" line4="    get _iLogInterval(): number {" line5="        return this.____iLogInterval_is_set ? this.____iLogInterval : LoggingParams._iLogInterval" line6="    }" line7="    set _iLogInterval(value: number) {" line8="        this.____iLogInterval_is_set = true" line9="        this.____iLogInterval = value" line10="    }" line11="    " line12="    static idefaultLogInterv: number" line13="    private ___idefaultLogInterv_is_set: boolean" line14="    private ___idefaultLogInterv: number" line15="    get idefaultLogInterv(): number {" line16="        return this.___idefaultLogInterv_is_set ? this.___idefaultLogInterv : LoggingParams.idefaultLogInterv" line17="    }" line18="    set idefaultLogInterv(value: number) {" line19="        this.___idefaultLogInterv_is_set = true" line20="        this.___idefaultLogInterv = value" line21="    }" line22="    " line23="    public static __initLoggingParams() {" line24="        LoggingParams.idefaultLogInterv = 2000" line25="        LoggingParams._iLogInterval = 0" line26="    }" line27="    " line28="    constructor() {" line29="        this._iLogInterval = this.idefaultLogInterv" line30="    }" line31="    " line32="    public getLogInterval(): number {" line33="        return this._iLogInterval" line34="    }" line35="    " line36="}" numlines="37"></mutation><next><block type="typescript_statement" id="Qwd1xNc9XOvN,=cf:d7x" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="LoggingParams.__initLoggingParams()" numlines="1"></mutation><next><block type="typescript_statement" id="PNr9*.ynR(,FJfoowjbi" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class dataOutput {" line1="    szLine: string" line2="    constructor() {" line3="        this.szLine = &quot;&quot;" line4="    }" line5="    " line6="    public writeHeader() {" line7="        this.szLine = &quot;Time\thh:mm:ss\tTiC&quot;" line8="        serial.writeLine(this.szLine)" line9="    }" line10="    " line11="    public writeData(TTime: any, TiC: number) {" line12="        this.szLine = TTime + &quot;\t&quot; + TiC" line13="        serial.writeLine(this.szLine)" line14="    }" line15="    " line16="}" numlines="17"></mutation><next><block type="typescript_statement" id="E|mpG.1.Mq_(1ZJcWE48" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let p1 = new LoggingParams()" numlines="1" declaredvars="p1"></mutation><next><block type="typescript_statement" id="InLkIGjT:9MKuZZ7JIQC" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let dataLog = new dataOutput()" numlines="1" declaredvars="dataLog"></mutation><next><block type="typescript_statement" id="9qrm4A7:By3es)XsnuH^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let td = new TimeAndDate()" numlines="1" declaredvars="td"></mutation><next><block type="serial_redirect_to_usb" id="8E7wQFOfK1AY!Nn*+`E~"><next><block type="typescript_statement" id="C{M4u59cY2?]JtaVfhp(" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="td.start()" numlines="1"></mutation><next><block type="typescript_statement" id="B4cv%L==7_.pZ:Mbx,)z" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="dataLog.writeHeader()" numlines="1"></mutation><next><block type="device_while" id="2C}#z3-eQxJEjN)grQ1i"><value name="COND"><shadow type="logic_boolean" id="-vi0STOa11c64W/P^bZ`"><field name="BOOL">TRUE</field></shadow></value><statement name="DO"><block type="function_call" id="AQR2le3I$bN9QZ[?45ZK"><mutation name="on_forever" functionid="08N0tm89s+h2k9lem5T]"></mutation></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="q_z_F[P#s%RF%yZ)+[.q" x="1056" y="20"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="variables_set" id="9SW5~LbzoCHi690iIevH"><field name="VAR" id="K+p7qhtRucG+^C;m~^1/">LoggingIsOn</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_negate" id="!:m[OGHmC9Fz*9Gc[CiM"><value name="BOOL"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="DboRp_#wg;(*W1-BzJ@?"><field name="VAR" id="K+p7qhtRucG+^C;m~^1/">LoggingIsOn</field></block></value></block></value><next><block type="controls_if" id="TU!U+#+%4PhZOTQz_}]|"><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="4}EPmG~wYdp@uT]wmRc)"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="X(wCnOFtUcyo*CHalRns"><field name="VAR" id="K+p7qhtRucG+^C;m~^1/">LoggingIsOn</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="*w[I3.@)^fsGXQl.frXj"><field name="BOOL">TRUE</field></block></value></block></value><statement name="DO0"><block type="function_call" id="uy#44FJxalOFuma?#]}I"><mutation name="showLoggingLED" functionid="kjBy=|Rfd4oZCRm+b%1_"></mutation></block></statement><statement name="ELSE"><block type="function_call" id="i%Z35zqH=kUDETsMfDKb"><mutation name="showNotLoggingLED" functionid="f:F2MJ]?cJGg!Mc9;Mjx"></mutation></block></statement></block></next></block></statement></block><block type="device_button_event" id="rJ8%`r1v)$59{6BGG{u_" x="1561" y="20"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="function_call" id=")RKXc^jTYjN1hX%L=NYZ"><mutation name="showQMarkLED" functionid="D*xYEnJLz(EGv3r73anD"></mutation></block></statement></block><block type="function_definition" id="zxgOr2e*U733qH@KoYJf" x="1823" y="20"><mutation name="showLoggingLED" functionid="kjBy=|Rfd4oZCRm+b%1_"></mutation><field name="function_name">showLoggingLED</field><statement name="STACK"><block type="device_show_leds" id="}fk}E$[l9RT%+r[q?#l`"><field name="LEDS">`
        . . . . . 
        . . . . # 
        . . . # . 
        # . # . . 
        . # . . .
        `</field></block></statement></block><block type="function_definition" id="!).%gl5(3S6E!L5m)BmY" x="2134" y="20"><mutation name="showNotLoggingLED" functionid="f:F2MJ]?cJGg!Mc9;Mjx"></mutation><field name="function_name">showNotLoggingLED</field><statement name="STACK"><block type="device_show_leds" id="KE=WqJgHAsvT0rI_{)XO"><field name="LEDS">`
        # . . . # 
        . # . # . 
        . . # . . 
        . # . # . 
        # . . . #
        `</field></block></statement></block><block type="function_definition" id="g-~C^^3A_.yiLl`$apP5" x="2471" y="20"><mutation name="showQMarkLED" functionid="D*xYEnJLz(EGv3r73anD"></mutation><field name="function_name">showQMarkLED</field><statement name="STACK"><block type="device_show_leds" id="O3tN4BOlq{9o?57j{Nv~"><field name="LEDS">`
        . # # # . 
        . # # # . 
        . . # . . 
        . . . . . 
        . . # . .
        `</field></block></statement></block><block type="function_definition" id="X~/_qq#]m5lk:E*_Bm=7" x="2764" y="20"><mutation name="on_forever" functionid="08N0tm89s+h2k9lem5T]"></mutation><field name="function_name">on_forever</field><comment pinned="false" h="80" w="160">Note: If "???" is displayed, direction is unknown!</comment><statement name="STACK"><block type="controls_if" id="_o2-2wNtm+36$=sPfdo+"><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="+|qWy!DiGgAOkbaXhINO"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="`.}F9%!_IcTqM31,lnfr"><field name="VAR" id="K+p7qhtRucG+^C;m~^1/">LoggingIsOn</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="OWX$JYm(CKV=jRzgN{^/"><field name="BOOL">TRUE</field></block></value></block></value><statement name="DO0"><block type="typescript_statement" id="$g0)#4bv~M6;q70;Fs~j" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="tempC = Math.roundWithPrecision(input.temperature(), 2)" numlines="1"></mutation><next><block type="typescript_statement" id="c$~BUk688^wmRY!/%Kn(" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="dataLog.writeData(td.getTime(), tempC)" numlines="1"></mutation></block></next></block></statement><statement name="ELSE"><block type="function_call" id="VME.a3Kym]%nz9WXdYtx"><mutation name="showNotLoggingLED" functionid="f:F2MJ]?cJGg!Mc9;Mjx"></mutation></block></statement><next><block type="device_pause" id="LA~,=qw%PM7tNZLyv};M"><value name="pause"><shadow type="timePicker"></shadow><block type="typescript_expression" id="b~NA9ln4~li?;!!x-32y" editable="false"><field name="EXPRESSION">p1.getLogInterval()</field></block></value></block></next></block></statement></block></xml>